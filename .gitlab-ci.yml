---
workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: always
    - if: '$CI_PIPELINE_SOURCE =~ /^trigger|pipeline|web|api$/'
      when: always
    - if: $CI_COMMIT_TAG
      when: never
    - when: always


include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  # - template: Security/Container-Scanning.gitlab-ci.yml

  - local: 'ci/semantic-release.yml'
  - local: 'ci/check.yml'
  - local: 'ci/docker.yml'
  - local: 'ci/pages.yml'

# Global SAST Variables

variables:
  SAST_EXCLUDED_PATHS: "spec,test,tests,tmp,node_modules,target,venv"
  SAST_BANDIT_EXCLUDED_PATHS: "*/test/**,*/tests/**,*/node_modules/**,*/target/**,*/venv/**"
  SECRET_DETECTION_EXCLUDED_PATHS: "docs"
  PYTHON_IMAGE: "python"
  PYTHON_TAG: "3.10"

  DOCKER_DRIVER: overlay2
  DOCKER_BUILDKIT: 1
  DOCKER_IMAGE: docker.io/library/docker
  DOCKER_TAG: "20.10.16"


  ## Semantic Release
  ENABLE_SEMANTIC_RELEASE: "true"
  ENABLE_SEMANTIC_RELEASE_DRY_RUN: "true"

stages:
  - test
  - build
  - docs
  - deploy
  - publish

.base-python:
  image: $PYTHON_IMAGE:$PYTHON_TAG
  before_script:
    - pip install poetry
    - poetry lock --no-update
    - poetry install




sbom: 
  stage: docs 
  image: $PYTHON_IMAGE:$PYTHON_TAG
  script:
    - pip install cyclonedx-bom
    - rm sbom.json
    - cyclonedx-py --poetry -o sbom.json --format json
  artifacts:
    paths:
      - sbom.json

###########
# test
###########
mkdocs:
  stage: test
  needs: [ ]
  # Always test build mkdocs to ensure no issues with the documentation.
  extends: .base-python
  script:
    - poetry run mkdocs build --strict --verbose
  artifacts:
    paths:
      - "site"

sast:
  stage: test
  needs: [ ]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never

unit-tests:
  extends: .base-python
  stage: test
  needs: []
  script:
    - poetry run coverage run --source=hopprcop/ -m pytest --junit-xml=test.xml
    - poetry run coverage report -m
    - poetry run coverage xml --fail-under=55
  coverage: "/TOTAL.+ ([0-9]{1,3}%)/"
  artifacts:
    reports:
      junit:
        - test.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

integration-test:
  extends: .base-python
  stage: test
  needs:
  - job: build-dist
    artifacts: true
  variables:
    TEST_DIR: hoppr-integration-test
  script:
    - curl -kL --output cyclonedx-cli https://github.com/CycloneDX/cyclonedx-cli/releases/download/v0.24.2/cyclonedx-linux-x64
    - chmod 777 ./cyclonedx-cli
    # For testing until hoppr 1.8.0 release
    - pip install "hoppr @ git+https://gitlab.com/hoppr/hoppr.git@next"
    - python -m pip install dist/hoppr_cop*.whl
    # - pip install hoppr
    # - python -m pip install --find-links=dist hoppr_cop
    - hopctl bundle $TEST_DIR/manifest.yml
      --transfer $TEST_DIR/transfer.yml
      --log hopprcop_log.txt
      --verbose
    - tar -xvf hoppr-integration-test.tar.gz
    - ./cyclonedx-cli validate
      --input-format json
      --input-file generic/_metadata_/_delivered_bom.json
      --input-version v1_4
      --fail-on-errors
  artifacts:
    when: always
    paths:
      - hopprcop_log.txt
      - hopprcop-vulnerability-results-enhanced.json

check-format:
  extends: .base-python
  stage: test
  needs: [ ]
  script:
    - poetry run black --check ./hopprcop

check-lint:
  extends: .base-python
  stage: test
  needs: [ ]
  script:
    - poetry run pylint ./hopprcop

# check-types:
#   extends: .base-python
#   stage: test
#   needs: []
#   script:
#     - poetry run mypy --namespace-packages --explicit-package-bases --install-types --non-interactive hoppr/

###########
# build
###########

build-dist:
  extends: .base-python
  needs: [ "semantic-release:dry-run" ]
  script:
    - sed -i -e "s/^__version__ = \".*\"/__version__ = \"$RELEASE_VERSION\"/" hopprcop/__init__.py
    - poetry version $RELEASE_VERSION
    - poetry build
  artifacts:
    paths:
      - "dist/"
      - hopprcop/__init__.py
      - pyproject.toml



validate-renovate-config:
  image: renovate/renovate:35.31.5
  needs: []
  variables:
    RENOVATE_CONFIG_FILE: "renovate.json"
  script:
    - renovate-config-validator

