###########
# test
###########
mkdocs:
  stage: test
  needs: [ ]
  # Always test build mkdocs to ensure no issues with the documentation.
  extends: .base-python
  script:
    - poetry run mkdocs build --strict --verbose
  artifacts:
    paths:
      - "site"

sast:
  stage: test
  needs: [ ]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never

unit-tests:
  extends: .base-python
  stage: test
  needs: []
  script:
    - poetry run coverage run --source=hopprcop/ -m pytest --junit-xml=test.xml
    - poetry run coverage report -m
    - poetry run coverage xml --fail-under=55
  coverage: "/TOTAL.+ ([0-9]{1,3}%)/"
  artifacts:
    reports:
      junit:
        - test.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

integration-test:
  extends: .base-python
  stage: test
  needs:
    - job: build-dist
      artifacts: true
  variables:
    TEST_DIR: hoppr-integration-test
  script:
    - curl -kL --output cyclonedx-cli https://github.com/CycloneDX/cyclonedx-cli/releases/download/v0.24.2/cyclonedx-linux-x64
    - chmod 777 ./cyclonedx-cli
    - pip install hoppr
    - python -m pip install --find-links=dist hoppr_cop
    - hopctl bundle
      --transfer $TEST_DIR/transfer.yml
      --log hopprcop_log.txt
      --verbose
      $TEST_DIR/manifest.yml
    - ls -al
    - tar -xvf hoppr-integration-test.tar.gz
    - ls -al
    - ./cyclonedx-cli validate
      --input-format json
      --input-file generic/_metadata_/_delivered_bom.json
      --input-version v1_4
      --fail-on-errors
  artifacts:
    when: always
    paths:
      - hopprcop_log.txt
      - hopprcop-vulnerability-results-enhanced.json

check-format:
  extends: .base-python
  stage: test
  needs: [ ]
  script:
    - poetry run black --check ./hopprcop

check-lint:
  extends: .base-python
  stage: test
  needs: [ ]
  script:
    - poetry run pylint ./hopprcop
